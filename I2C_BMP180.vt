`timescale 10 ns/ 10 ps
module I2C_BMP180_vlg_tst();

// test vector input registers
reg clk;
reg reset;
reg treg_scl;
reg treg_sda;

reg swId;
reg swSettings;
reg swTemp;
reg swPress;
reg swGTemp;
reg swGPress;
reg swShow;

// wires                                               
wire [7:0]  out;
wire ready;
wire scl;
wire sda;

wire receive;
wire received;
wire send;
wire sended;
wire start;

reg en_scl;
reg en_sda;

reg [7:0]data;
reg [7:0]count;

// assign statements (if any)                          
assign scl = (en_scl) ? treg_scl : 1'bZ;
assign sda = (en_sda) ? treg_sda : 1'bZ;

I2C_BMP180 ENTITY (
// port map - connection between master ports and signals/registers   
	.receive(receive),
	.received(received),
	.send(send),
	.sended(sended),
	.start(start),
	.clk(clk),
	.out(out),
	.ready(ready),
	.reset(reset),
	.scl(scl),
	.sda(sda),
	.swGPress(swGPress),
	.swGTemp(swGTemp),
	.swId(swId),
	.swPress(swPress),
	.swSettings(swSettings),
	.swShow(swShow),
	.swTemp(swTemp)
);


event EVENT_INIT;
event EVENT_RESET;
event EVENT_SW_ID;
event EVENT_ACK;

always
begin
//ns/20 =hz
//10+10 = 20ns = 50Mhz
#1 clk = ~clk; 
//1000ns = 1MHz
//#50 clk = ~clk;
//500ns = 2MHz
//#25 clk = ~clk;
//2000ns = 0.5MHz
//#100 clk = ~clk;
//4000ns = 0.25MHz
//#200 clk = ~clk;
//scl 500Hz
//#250 clk = ~clk;
//6220 scl 400Hz
//#311 clk = ~clk;
//2500000ns = 400 hz
//#125000 clk = ~clk;  
end

initial 
begin
	forever begin
		@(EVENT_INIT)
			#0
			clk = 1'b0; 
			swId = 1'b1;
			swShow = 1'b1;
			swGPress = 1'b1;
			swGTemp = 1'b1;
			swPress = 1'b1;
			swSettings = 1'b1;
			swTemp = 1'b1;
			en_scl = 1'b0;
			en_sda = 1'b0;
			reset = 1'b1;
	end
end

initial 
begin
	forever begin
		@(EVENT_RESET)
			#0
			reset = 1'b0;
			//при сбросе i2c master выдает готовность и сбрасывает сигналы sended и received
			#1000
			reset = 1'b1;
	end
end
	
initial 
begin
	forever begin
		@(EVENT_SW_ID)
			#500
			swId = 1'b0;
			#2500
			swId = 1'b1;
	end
end


initial 
begin
	forever begin
		@(EVENT_ACK)
			#0
			en_sda = 1'b1;
			treg_sda = 1'b0;
			#200
			en_sda = 1'b0;
	end
end


initial 
begin
#0		->EVENT_INIT;
#500	->EVENT_RESET;
#1500	->EVENT_SW_ID;
#5000	->EVENT_ACK;
#4500	->EVENT_ACK;
#10000 $stop;
end
	
endmodule

