`timescale 10 ns/ 10 ps
module I2C_BMP180_vlg_tst();

// test vector input registers
reg clk;
reg reset;
reg treg_scl;
reg treg_sda;

reg swId;
reg swSettings;
reg swTemp;
reg swPress;
reg swGTemp;
reg swGPress;
reg swShow;

// wires                                               
wire [7:0]  out;
wire [5:0]  state;
wire ready;
wire scl;
wire sda;

wire receive;
wire received;
wire send;
wire sended;

reg en_scl;
reg en_sda;

reg [7:0]data;
reg [7:0]count;

// assign statements (if any)                          
assign scl = (en_scl) ? treg_scl : 1'bZ;
assign sda = (en_sda) ? treg_sda : 1'bZ;

I2C_BMP180 ENTITY (
.receive(receive),
.received(received),
.send(send),
.sended(sended),
.swId(swId),
.swSettings(swSettings),
.swTemp(swTemp),
.swPress(swPress),
.swGTemp(swGTemp),
.swGPress(swGPress),
.swShow(swShow),
.clk(clk), 
.reset(reset),
.out(out),
.ready(ready), 
.scl(scl),
.sda(sda),
.state(state)
);

event EVENT_GET_ID;					//цикл тестирования - получить ID чипа 

event EVENT_INIT;
event EVENT_RESET;
event EVENT_SW_ID;
event EVENT_ACK;
event EVENT_GENERATOR_SDA_DATA;	//генератор 
event EVENT_GENERATE_ID;			//ответ ID чипа



always
begin
//ns/20 =hz
//10+10 = 20ns = 50Mhz
#1 clk = ~clk; 
//1000ns = 1MHz
//#50 clk = ~clk;
//500ns = 2MHz
//#25 clk = ~clk;
//2000ns = 0.5MHz
//#100 clk = ~clk;
//4000ns = 0.25MHz
//#200 clk = ~clk;
//scl 500Hz
//#250 clk = ~clk;
//6220 scl 400Hz
//#311 clk = ~clk;
//2500000ns = 400 hz
//#125000 clk = ~clk;  
end

initial 
begin
	forever begin
		@(EVENT_INIT)
			#0
			clk = 1'b0; 
			swId = 1'b1;
			swShow = 1'b1;
			swGPress = 1'b1;
			swGTemp = 1'b1;
			swPress = 1'b1;
			swSettings = 1'b1;
			swTemp = 1'b1;
			en_scl = 1'b0;
			en_sda = 1'b0;
			reset = 1'b1;
	end
end

initial 
begin
	forever begin
		@(EVENT_RESET)
			#0
			reset = 1'b0;
			//при сбросе i2c master выдает готовность и сбрасывает сигналы sended и received
			#1000
			reset = 1'b1;
	end
end

initial 
begin
	forever begin
		@(EVENT_SW_ID)
			#500
			swId = 1'b0;
			#2500
			swId = 1'b1;
	end
end

initial 
begin
	forever begin
		@(EVENT_ACK)
			#0
			en_sda = 1'b1;
			treg_sda = 1'b0;
			#200
			en_sda = 1'b0;
	end
end

	
initial 
begin
	forever begin
		@(EVENT_GENERATOR_SDA_DATA)
			#0
			en_sda = 1'b1;
			repeat(7)
			begin				
				treg_sda = data[count];
				#500
				count = count - 1;								
			end
			treg_sda = data[count];
			#450							
			en_sda = 1'b0;
	end
end

initial 
begin
	forever begin
		@(EVENT_GENERATE_ID)
			//генерируем ответ
			data = 8'h55;
			count = 7;			
			#0		->EVENT_GENERATOR_SDA_DATA;			
	end
end



initial 
begin
	forever begin
		@(EVENT_GET_ID)
			#0		->EVENT_INIT;
			#500	->EVENT_RESET;
			#1500	->EVENT_SW_ID;
			#5000	->EVENT_ACK;
			#4500	->EVENT_ACK;
			#4800	->EVENT_ACK;
			#400	->EVENT_GENERATE_ID;		
	end
end


initial 
begin
#0		->EVENT_GET_ID;
//#25000 $stop;

#45000 $stop;


end
	
endmodule

