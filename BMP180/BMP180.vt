`timescale 10 ns/ 10 ps
module BMP180_vlg_tst();

`ifdef FULL_BMP180
	`define FULL_QUERY_BMP180
`else 
	`undef FULL_QUERY_BMP180
`endif
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
reg [7:0] datareceive;
reg isReady;
reg received;
reg sended;
reg reset;
reg swId;
reg swShow;
`ifdef FULL_QUERY_BMP180
	reg swSettings;
	reg swTemp;
	reg swPress;
	reg swGTemp;
	reg swGPress;
`endif	

// wires                                               
wire [7:0]  datasend;
wire start;
wire [7:0]  out;
wire receive;
wire send;


BMP180 BMP180 (
// port map - connection between master ports and signals/registers   
	.clk(clk), //
	.datareceive(datareceive),
	.datasend(datasend), 
	.receive(receive),
	.received(received),
	.send(send),
	.sended(sended),
	.start(start),
	.swId(swId), 
	.swShow(swShow), 
	.reset(reset),
	`ifdef FULL_QUERY_BMP180
		.swPress(swPress), 
		.swGTemp(swGTemp), 
		.swGPress(swGPress), 
		.swSettings(swSettings),
		.swTemp(swTemp), 
	`endif
	.isReady(isReady),
	.out(out), 
	.state(state)
);

always
begin
#5 clk = ~clk; //1MHz
end

event EVENT_INIT;
event EVENT_RESET;
event EVENT_SW_ID;
event EVENT_SENDED;
event EVENT_RECEIVED;

initial 
begin
	forever begin
		@(EVENT_INIT)
			#0
			clk = 1'b0; 
			swId = 1'b1;
			swShow = 1'b1;
		`ifdef FULL_QUERY_BMP180
			swGPress = 1'b1;
			swGTemp = 1'b1;
			swPress = 1'b1;
			swSettings = 1'b1;
			swTemp = 1'b1;
		`endif
	end
end

initial 
begin
	forever begin
		@(EVENT_RESET)
			#0
			reset = 1'b0;
			//при сбросе i2c master выдает готовность и сбрасывает сигналы sended и received
			isReady = 1'b1;
			received = 1'b0;
			sended = 1'b0;
			#1000
			reset = 1'b1;
	end
end

initial 
begin
	forever begin
		@(EVENT_SENDED)
			#0 
			sended = 1'b1;
			#100 
			sended = 1'b0;
	end
end

initial 
begin
	forever begin
		@(EVENT_RECEIVED)
			#0 
			datareceive = 8'h77;
			#100
			received = 1'b1;
			#100 
			received = 1'b0;
	end
end
	
initial 
begin
	forever begin
		@(EVENT_SW_ID)
			#500
			swId = 1'b0;
			#2500
			swId = 1'b1;
	end
end

initial 
begin
#0		->EVENT_INIT;
#500	->EVENT_RESET;
#1500	->EVENT_SW_ID;
#5000 ->EVENT_SENDED;
#5000 ->EVENT_SENDED;
#5000 ->EVENT_SENDED;
#5000 ->EVENT_RECEIVED;
#5000 ->EVENT_RECEIVED;
#5000 ->EVENT_RECEIVED;
#10000 $stop;
end
                                                   
endmodule

