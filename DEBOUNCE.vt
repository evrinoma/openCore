// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "03/01/2019 00:15:15"
                                                                                
// Verilog Test Bench template for design : debounce
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 
`timescale 1 ns/ 1 ps
module debounce_vlg_tst();
event EVENT_NEGEDGE_BUTTON;
event EVENT_POSEDGE_BUTTON;

// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
reg keyBounce;
// wires                                               
wire keyDeBounce;

// assign statements (if any)                          
DEBOUNCE i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.keyBounce(keyBounce),
	.keyDeBounce(keyDeBounce)
);
 initial begin
  clk = 0;
  forever #10 clk = ~clk;
 end
 
initial 
begin
	forever begin
	@(EVENT_POSEDGE_BUTTON)
		keyBounce = 1;
		#10;
		keyBounce=0;
		#10;
		keyBounce = 1;
		#20;
		keyBounce=0;
		#10; 
		keyBounce = 1;
		#30;
		keyBounce=0;
		#10;
		keyBounce = 1;
		#40;
		keyBounce=0;
		#10; 
		keyBounce = 1;
		#30;
		keyBounce=0; 
		#2000; 
		keyBounce = 1;
		#10;
		keyBounce=0;
		#10;
		keyBounce = 1;
		#20;
		keyBounce=0;
		#10; 
		keyBounce = 1;
		#30;
		keyBounce=0;
		#10;
		keyBounce = 1; 
		#40;
		keyBounce=0;
		#40;
		keyBounce=1;
	end   
end  

initial 
begin
	forever begin
	@(EVENT_NEGEDGE_BUTTON)
		keyBounce = 0;
		#10;
		keyBounce=1;
		#20;
		keyBounce = 0;
		#10;
		keyBounce=1;
		#30; 
		keyBounce = 0;
		#10;
		keyBounce=1;
		#40;
		keyBounce = 0;
		#10;
		keyBounce=1;
		#30; 
		keyBounce = 0;
		#10;
		keyBounce=1; 
		#20000; 
		keyBounce = 0;
		#10;
		keyBounce=1;
		#20;
		keyBounce = 0;
		#10;
		keyBounce=1;
		#30; 
		keyBounce = 0;
		#10;
		keyBounce=1;
		#40;
		keyBounce = 0; 
	end   
end  

initial 
begin
#0		->EVENT_POSEDGE_BUTTON;
#3500		->EVENT_POSEDGE_BUTTON;

#5000	$stop;
end

endmodule

